% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/provider-cortex.R
\name{chat_cortex}
\alias{chat_cortex}
\title{Create a chatbot that speaks to the Snowflake Cortex Analyst}
\usage{
chat_cortex(
  model_spec = NULL,
  model_file = NULL,
  api_args = list(),
  echo = c("none", "text", "all"),
  ...
)
}
\arguments{
\item{model_spec}{A semantic model specification, or \code{NULL} when
using \code{model_file} instead.}

\item{model_file}{Path to a semantic model file stored in a Snowflake Stage,
or \code{NULL} when using \code{model_spec} instead.}

\item{api_args}{Named list of arbitrary extra arguments appended to the body
of every chat API call.}

\item{echo}{One of the following options:
\itemize{
\item \code{none}: don't emit any output (default when running in a function).
\item \code{text}: echo text output as it streams in (default when running at
the console).
\item \code{all}: echo all input and output.
}

Note this only affects the \code{chat()} method.}

\item{...}{Further arguments passed to \code{\link[snowflakeauth:snowflake_connection]{snowflakeauth::snowflake_connection()}}.}
}
\value{
A \link{Chat} object.
}
\description{
Chat with the LLM-powered \href{https://docs.snowflake.com/en/user-guide/snowflake-cortex/cortex-analyst}{Snowflake Cortex Analyst}.

Unlike most comparable model APIs, Cortex does not take a system prompt.
Instead, the caller must provide a "semantic model" describing available
tables, their meaning, and verified queries that can be run against them as a
starting point. The semantic model can be passed as a YAML string or via
reference to an existing file in a Snowflake Stage.

Note that Cortex does not support multi-turn, so it will not remember
previous messages. Nor does it support registering tools, and attempting to
do so will result in an error.

By default we pick up on Snowflake connection parameters defined in the same
\code{connections.toml} file used by the \href{https://docs.snowflake.com/en/developer-guide/python-connector/python-connector-connect}{Python Connector for Snowflake}
and the \href{https://docs.snowflake.com/en/developer-guide/snowflake-cli/connecting/configure-connections}{Snowflake CLI},
though connection parameters can be passed manually to
\code{\link[snowflakeauth:snowflake_connection]{snowflakeauth::snowflake_connection()}}, too. Keep in mind that Cortex
itself only supports OAuth and key-pair authentication.
}
\examples{
\dontshow{if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Authenticate with Snowflake using an existing connections.toml file.
chat <- chat_cortex(
  model_file = "@my_db.my_schema.my_stage/model.yaml"
)
chat$chat("What questions can I ask?")

# Or pass connection parameters manually. For example, to use key-pair
# authentication:
chat <- chat_cortex(
  model_file = "@my_db.my_schema.my_stage/model.yaml",
  account = "myaccount",
  user = "me",
  private_key = "rsa_key.p8"
)
\dontshow{\}) # examplesIf}
}
\seealso{
Other chatbots: 
\code{\link{chat_bedrock}()},
\code{\link{chat_claude}()},
\code{\link{chat_gemini}()},
\code{\link{chat_github}()},
\code{\link{chat_groq}()},
\code{\link{chat_ollama}()},
\code{\link{chat_openai}()},
\code{\link{chat_perplexity}()}
}
\concept{chatbots}
